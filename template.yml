AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Webshop
  Sample SAM Template for webshop
'
Globals:
  Function:
    Timeout: 3
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: webshop-bucket
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: webshop
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'http://webshop-bucket.s3-website.eu-west-2.amazonaws.com'"
        MaxAge: "'600'"
        AllowCredentials: True
  getYoutubeFeedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'get-youtube-feed'
      Handler: src/lambda/get-youtube-feed/index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          YT_API_HOST: 'https://www.googleapis.com/youtube/v3'
          YT_API_KEY: 'AIzaSyDOpt4JbWnoXHGMCtthSUMCgNUWYSzIugg'
          YT_CHANNEL_ID: 'UCyQRql0NmT5_LwTXjk51wkg'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /youtube-feed
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  getProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'get-products'
      Handler: src/lambda/get-stripe-products/index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          STRIPE_API_HOST: 'https://api.stripe.com'
          STRIPE_API_KEY_TEST: 'pk_test_51GqF9TCPYsEp9tH0vHmqEJv4Ir0YbAv2Tq2thfFoSK8vsTuqO9uunwra5KdfTd8EzBiUdK3meVfmmCscGzfkw3RW00e9hyGH30'
          STRIPE_API_SECRET_TEST: 'sk_test_51GqF9TCPYsEp9tH0xQwmssuHSV4bvbxTCyZJhy80C92OxYwWK01d2pK5hm8XJyHxDQGKwVVpaXbaSb1wrUXA3nkE005yZpWZie'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /products
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  postEmailAccountCreatedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'email-account-created'
      Handler: src/lambda/send-email-account-created/index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          TEST_TO_ADDRESS: 'joao.campos18@gmail.campos18'
          TEST_SOURCE: 'joaocampos.dev@gmail.com'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /email-account-created
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
  postOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'add-order'
      Handler: src/lambda/add-order/index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Events:
        Api:
          Type: Api
          Properties:
            Path: /add-order
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrderTable
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: webshop-user-pool
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      AutoVerifiedAttributes:
        - email
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: WebshopUserPoolClient
      GenerateSecret: false
      UserPoolId: !Ref UserPool
  OrderTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Orders
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2